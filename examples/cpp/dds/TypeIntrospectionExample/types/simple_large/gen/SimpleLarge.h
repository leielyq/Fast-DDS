// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SimpleLarge.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_SIMPLELARGE_H_
#define _FAST_DDS_GENERATED_SIMPLELARGE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SimpleLarge_SOURCE)
#define SimpleLarge_DllAPI __declspec( dllexport )
#else
#define SimpleLarge_DllAPI __declspec( dllimport )
#endif // SimpleLarge_SOURCE
#else
#define SimpleLarge_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SimpleLarge_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure SimpleLarge_TypeIntrospectionExample defined by the user in the IDL file.
 * @ingroup SIMPLELARGE
 */
class SimpleLarge_TypeIntrospectionExample
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleLarge_TypeIntrospectionExample();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample(
            const SimpleLarge_TypeIntrospectionExample& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample(
            SimpleLarge_TypeIntrospectionExample&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample& operator =(
            const SimpleLarge_TypeIntrospectionExample& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleLarge_TypeIntrospectionExample that will be copied.
     */
    eProsima_user_DllExport SimpleLarge_TypeIntrospectionExample& operator =(
            SimpleLarge_TypeIntrospectionExample&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SimpleLarge_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleLarge_TypeIntrospectionExample& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SimpleLarge_TypeIntrospectionExample object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleLarge_TypeIntrospectionExample& x) const;

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();
    /*!
     * @brief This function copies the value in member points
     * @param _points New value to be copied in member points
     */
    eProsima_user_DllExport void points(
            const std::array<int32_t, 3>& _points);

    /*!
     * @brief This function moves the value in member points
     * @param _points New value to be moved in member points
     */
    eProsima_user_DllExport void points(
            std::array<int32_t, 3>&& _points);

    /*!
     * @brief This function returns a constant reference to member points
     * @return Constant reference to member points
     */
    eProsima_user_DllExport const std::array<int32_t, 3>& points() const;

    /*!
     * @brief This function returns a reference to member points
     * @return Reference to member points
     */
    eProsima_user_DllExport std::array<int32_t, 3>& points();
    /*!
     * @brief This function copies the value in member second_message
     * @param _second_message New value to be copied in member second_message
     */
    eProsima_user_DllExport void second_message(
            const std::string& _second_message);

    /*!
     * @brief This function moves the value in member second_message
     * @param _second_message New value to be moved in member second_message
     */
    eProsima_user_DllExport void second_message(
            std::string&& _second_message);

    /*!
     * @brief This function returns a constant reference to member second_message
     * @return Constant reference to member second_message
     */
    eProsima_user_DllExport const std::string& second_message() const;

    /*!
     * @brief This function returns a reference to member second_message
     * @return Reference to member second_message
     */
    eProsima_user_DllExport std::string& second_message();
    /*!
     * @brief This function copies the value in member some_values
     * @param _some_values New value to be copied in member some_values
     */
    eProsima_user_DllExport void some_values(
            const std::vector<int16_t>& _some_values);

    /*!
     * @brief This function moves the value in member some_values
     * @param _some_values New value to be moved in member some_values
     */
    eProsima_user_DllExport void some_values(
            std::vector<int16_t>&& _some_values);

    /*!
     * @brief This function returns a constant reference to member some_values
     * @return Constant reference to member some_values
     */
    eProsima_user_DllExport const std::vector<int16_t>& some_values() const;

    /*!
     * @brief This function returns a reference to member some_values
     * @return Reference to member some_values
     */
    eProsima_user_DllExport std::vector<int16_t>& some_values();
    /*!
     * @brief This function sets a value in member is_it_not_true_that_true_is_not_true
     * @param _is_it_not_true_that_true_is_not_true New value for member is_it_not_true_that_true_is_not_true
     */
    eProsima_user_DllExport void is_it_not_true_that_true_is_not_true(
            bool _is_it_not_true_that_true_is_not_true);

    /*!
     * @brief This function returns the value of member is_it_not_true_that_true_is_not_true
     * @return Value of member is_it_not_true_that_true_is_not_true
     */
    eProsima_user_DllExport bool is_it_not_true_that_true_is_not_true() const;

    /*!
     * @brief This function returns a reference to member is_it_not_true_that_true_is_not_true
     * @return Reference to member is_it_not_true_that_true_is_not_true
     */
    eProsima_user_DllExport bool& is_it_not_true_that_true_is_not_true();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const SimpleLarge_TypeIntrospectionExample& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_index;
    std::string m_message;
    std::array<int32_t, 3> m_points;
    std::string m_second_message;
    std::vector<int16_t> m_some_values;
    bool m_is_it_not_true_that_true_is_not_true;
};

#endif // _FAST_DDS_GENERATED_SIMPLELARGE_H_