// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Complex.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Complex.h"
#include "ComplexTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

InternalComplexPoints_TypeIntrospectionExample::InternalComplexPoints_TypeIntrospectionExample()
{
    // m_x_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@13eb8acf
    m_x_member = 0;
    // m_y_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51c8530f
    m_y_member = 0;
    // m_z_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7403c468
    m_z_member = 0;

    // Just to register all known types
    registerComplexTypes();
}

InternalComplexPoints_TypeIntrospectionExample::~InternalComplexPoints_TypeIntrospectionExample()
{



}

InternalComplexPoints_TypeIntrospectionExample::InternalComplexPoints_TypeIntrospectionExample(
        const InternalComplexPoints_TypeIntrospectionExample& x)
{
    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
}

InternalComplexPoints_TypeIntrospectionExample::InternalComplexPoints_TypeIntrospectionExample(
        InternalComplexPoints_TypeIntrospectionExample&& x)
{
    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
}

InternalComplexPoints_TypeIntrospectionExample& InternalComplexPoints_TypeIntrospectionExample::operator =(
        const InternalComplexPoints_TypeIntrospectionExample& x)
{

    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;

    return *this;
}

InternalComplexPoints_TypeIntrospectionExample& InternalComplexPoints_TypeIntrospectionExample::operator =(
        InternalComplexPoints_TypeIntrospectionExample&& x)
{

    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;

    return *this;
}

bool InternalComplexPoints_TypeIntrospectionExample::operator ==(
        const InternalComplexPoints_TypeIntrospectionExample& x) const
{

    return (m_x_member == x.m_x_member && m_y_member == x.m_y_member && m_z_member == x.m_z_member);
}

bool InternalComplexPoints_TypeIntrospectionExample::operator !=(
        const InternalComplexPoints_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalComplexPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t InternalComplexPoints_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalComplexPoints_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void InternalComplexPoints_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x_member;
    scdr << m_y_member;
    scdr << m_z_member;

}

void InternalComplexPoints_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x_member;
    dcdr >> m_y_member;
    dcdr >> m_z_member;
}

/*!
 * @brief This function sets a value in member x_member
 * @param _x_member New value for member x_member
 */
void InternalComplexPoints_TypeIntrospectionExample::x_member(
        int32_t _x_member)
{
    m_x_member = _x_member;
}

/*!
 * @brief This function returns the value of member x_member
 * @return Value of member x_member
 */
int32_t InternalComplexPoints_TypeIntrospectionExample::x_member() const
{
    return m_x_member;
}

/*!
 * @brief This function returns a reference to member x_member
 * @return Reference to member x_member
 */
int32_t& InternalComplexPoints_TypeIntrospectionExample::x_member()
{
    return m_x_member;
}

/*!
 * @brief This function sets a value in member y_member
 * @param _y_member New value for member y_member
 */
void InternalComplexPoints_TypeIntrospectionExample::y_member(
        int32_t _y_member)
{
    m_y_member = _y_member;
}

/*!
 * @brief This function returns the value of member y_member
 * @return Value of member y_member
 */
int32_t InternalComplexPoints_TypeIntrospectionExample::y_member() const
{
    return m_y_member;
}

/*!
 * @brief This function returns a reference to member y_member
 * @return Reference to member y_member
 */
int32_t& InternalComplexPoints_TypeIntrospectionExample::y_member()
{
    return m_y_member;
}

/*!
 * @brief This function sets a value in member z_member
 * @param _z_member New value for member z_member
 */
void InternalComplexPoints_TypeIntrospectionExample::z_member(
        int32_t _z_member)
{
    m_z_member = _z_member;
}

/*!
 * @brief This function returns the value of member z_member
 * @return Value of member z_member
 */
int32_t InternalComplexPoints_TypeIntrospectionExample::z_member() const
{
    return m_z_member;
}

/*!
 * @brief This function returns a reference to member z_member
 * @return Reference to member z_member
 */
int32_t& InternalComplexPoints_TypeIntrospectionExample::z_member()
{
    return m_z_member;
}


size_t InternalComplexPoints_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool InternalComplexPoints_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalComplexPoints_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

InternalComplexMessage_TypeIntrospectionExample::InternalComplexMessage_TypeIntrospectionExample()
{
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@365185bd
    m_message ="";

    // Just to register all known types
    registerComplexTypes();
}

InternalComplexMessage_TypeIntrospectionExample::~InternalComplexMessage_TypeIntrospectionExample()
{
}

InternalComplexMessage_TypeIntrospectionExample::InternalComplexMessage_TypeIntrospectionExample(
        const InternalComplexMessage_TypeIntrospectionExample& x)
{
    m_message = x.m_message;
}

InternalComplexMessage_TypeIntrospectionExample::InternalComplexMessage_TypeIntrospectionExample(
        InternalComplexMessage_TypeIntrospectionExample&& x)
{
    m_message = std::move(x.m_message);
}

InternalComplexMessage_TypeIntrospectionExample& InternalComplexMessage_TypeIntrospectionExample::operator =(
        const InternalComplexMessage_TypeIntrospectionExample& x)
{

    m_message = x.m_message;

    return *this;
}

InternalComplexMessage_TypeIntrospectionExample& InternalComplexMessage_TypeIntrospectionExample::operator =(
        InternalComplexMessage_TypeIntrospectionExample&& x)
{

    m_message = std::move(x.m_message);

    return *this;
}

bool InternalComplexMessage_TypeIntrospectionExample::operator ==(
        const InternalComplexMessage_TypeIntrospectionExample& x) const
{

    return (m_message == x.m_message);
}

bool InternalComplexMessage_TypeIntrospectionExample::operator !=(
        const InternalComplexMessage_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalComplexMessage_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t InternalComplexMessage_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalComplexMessage_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    return current_alignment - initial_alignment;
}

void InternalComplexMessage_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_message;

}

void InternalComplexMessage_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_message;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void InternalComplexMessage_TypeIntrospectionExample::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void InternalComplexMessage_TypeIntrospectionExample::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& InternalComplexMessage_TypeIntrospectionExample::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& InternalComplexMessage_TypeIntrospectionExample::message()
{
    return m_message;
}

size_t InternalComplexMessage_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool InternalComplexMessage_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalComplexMessage_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

Complex_TypeIntrospectionExample::Complex_TypeIntrospectionExample()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3e77a1ed
    m_index = 0;
    // m_internal_data com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3ffcd140

    // m_messages com.eprosima.idl.parser.typecode.ArrayTypeCode@23bb8443


    // Just to register all known types
    registerComplexTypes();
}

Complex_TypeIntrospectionExample::~Complex_TypeIntrospectionExample()
{



}

Complex_TypeIntrospectionExample::Complex_TypeIntrospectionExample(
        const Complex_TypeIntrospectionExample& x)
{
    m_index = x.m_index;
    m_internal_data = x.m_internal_data;
    m_messages = x.m_messages;
}

Complex_TypeIntrospectionExample::Complex_TypeIntrospectionExample(
        Complex_TypeIntrospectionExample&& x)
{
    m_index = x.m_index;
    m_internal_data = std::move(x.m_internal_data);
    m_messages = std::move(x.m_messages);
}

Complex_TypeIntrospectionExample& Complex_TypeIntrospectionExample::operator =(
        const Complex_TypeIntrospectionExample& x)
{

    m_index = x.m_index;
    m_internal_data = x.m_internal_data;
    m_messages = x.m_messages;

    return *this;
}

Complex_TypeIntrospectionExample& Complex_TypeIntrospectionExample::operator =(
        Complex_TypeIntrospectionExample&& x)
{

    m_index = x.m_index;
    m_internal_data = std::move(x.m_internal_data);
    m_messages = std::move(x.m_messages);

    return *this;
}

bool Complex_TypeIntrospectionExample::operator ==(
        const Complex_TypeIntrospectionExample& x) const
{

    return (m_index == x.m_index && m_internal_data == x.m_internal_data && m_messages == x.m_messages);
}

bool Complex_TypeIntrospectionExample::operator !=(
        const Complex_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t Complex_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += InternalComplexPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);

    for(size_t a = 0; a < (3); ++a)
    {
        current_alignment += InternalComplexMessage_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t Complex_TypeIntrospectionExample::getCdrSerializedSize(
        const Complex_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += InternalComplexPoints_TypeIntrospectionExample::getCdrSerializedSize(data.internal_data(), current_alignment);

    for(size_t a = 0; a < data.messages().size(); ++a)
    {
            current_alignment += InternalComplexMessage_TypeIntrospectionExample::getCdrSerializedSize(data.messages().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void Complex_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_internal_data;
    scdr << m_messages;


}

void Complex_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_internal_data;
    dcdr >> m_messages;

}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void Complex_TypeIntrospectionExample::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t Complex_TypeIntrospectionExample::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& Complex_TypeIntrospectionExample::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member internal_data
 * @param _internal_data New value to be copied in member internal_data
 */
void Complex_TypeIntrospectionExample::internal_data(
        const InternalComplexPoints_TypeIntrospectionExample& _internal_data)
{
    m_internal_data = _internal_data;
}

/*!
 * @brief This function moves the value in member internal_data
 * @param _internal_data New value to be moved in member internal_data
 */
void Complex_TypeIntrospectionExample::internal_data(
        InternalComplexPoints_TypeIntrospectionExample&& _internal_data)
{
    m_internal_data = std::move(_internal_data);
}

/*!
 * @brief This function returns a constant reference to member internal_data
 * @return Constant reference to member internal_data
 */
const InternalComplexPoints_TypeIntrospectionExample& Complex_TypeIntrospectionExample::internal_data() const
{
    return m_internal_data;
}

/*!
 * @brief This function returns a reference to member internal_data
 * @return Reference to member internal_data
 */
InternalComplexPoints_TypeIntrospectionExample& Complex_TypeIntrospectionExample::internal_data()
{
    return m_internal_data;
}
/*!
 * @brief This function copies the value in member messages
 * @param _messages New value to be copied in member messages
 */
void Complex_TypeIntrospectionExample::messages(
        const std::array<InternalComplexMessage_TypeIntrospectionExample, 3>& _messages)
{
    m_messages = _messages;
}

/*!
 * @brief This function moves the value in member messages
 * @param _messages New value to be moved in member messages
 */
void Complex_TypeIntrospectionExample::messages(
        std::array<InternalComplexMessage_TypeIntrospectionExample, 3>&& _messages)
{
    m_messages = std::move(_messages);
}

/*!
 * @brief This function returns a constant reference to member messages
 * @return Constant reference to member messages
 */
const std::array<InternalComplexMessage_TypeIntrospectionExample, 3>& Complex_TypeIntrospectionExample::messages() const
{
    return m_messages;
}

/*!
 * @brief This function returns a reference to member messages
 * @return Reference to member messages
 */
std::array<InternalComplexMessage_TypeIntrospectionExample, 3>& Complex_TypeIntrospectionExample::messages()
{
    return m_messages;
}

size_t Complex_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool Complex_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void Complex_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
