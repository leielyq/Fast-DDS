// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Sequence.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Sequence.h"
#include "SequenceTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Sequence_TypeIntrospectionExample::Sequence_TypeIntrospectionExample()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@319b92f3
    m_index = 0;
    // m_points com.eprosima.idl.parser.typecode.SequenceTypeCode@fcd6521


    // Just to register all known types
    registerSequenceTypes();
}

Sequence_TypeIntrospectionExample::~Sequence_TypeIntrospectionExample()
{


}

Sequence_TypeIntrospectionExample::Sequence_TypeIntrospectionExample(
        const Sequence_TypeIntrospectionExample& x)
{
    m_index = x.m_index;
    m_points = x.m_points;
}

Sequence_TypeIntrospectionExample::Sequence_TypeIntrospectionExample(
        Sequence_TypeIntrospectionExample&& x) noexcept 
{
    m_index = x.m_index;
    m_points = std::move(x.m_points);
}

Sequence_TypeIntrospectionExample& Sequence_TypeIntrospectionExample::operator =(
        const Sequence_TypeIntrospectionExample& x)
{

    m_index = x.m_index;
    m_points = x.m_points;

    return *this;
}

Sequence_TypeIntrospectionExample& Sequence_TypeIntrospectionExample::operator =(
        Sequence_TypeIntrospectionExample&& x) noexcept
{

    m_index = x.m_index;
    m_points = std::move(x.m_points);

    return *this;
}

bool Sequence_TypeIntrospectionExample::operator ==(
        const Sequence_TypeIntrospectionExample& x) const
{

    return (m_index == x.m_index && m_points == x.m_points);
}

bool Sequence_TypeIntrospectionExample::operator !=(
        const Sequence_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t Sequence_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t Sequence_TypeIntrospectionExample::getCdrSerializedSize(
        const Sequence_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.points().size() > 0)
    {
        current_alignment += (data.points().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void Sequence_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_points;

}

void Sequence_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_points;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void Sequence_TypeIntrospectionExample::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t Sequence_TypeIntrospectionExample::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& Sequence_TypeIntrospectionExample::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member points
 * @param _points New value to be copied in member points
 */
void Sequence_TypeIntrospectionExample::points(
        const std::vector<int32_t>& _points)
{
    m_points = _points;
}

/*!
 * @brief This function moves the value in member points
 * @param _points New value to be moved in member points
 */
void Sequence_TypeIntrospectionExample::points(
        std::vector<int32_t>&& _points)
{
    m_points = std::move(_points);
}

/*!
 * @brief This function returns a constant reference to member points
 * @return Constant reference to member points
 */
const std::vector<int32_t>& Sequence_TypeIntrospectionExample::points() const
{
    return m_points;
}

/*!
 * @brief This function returns a reference to member points
 * @return Reference to member points
 */
std::vector<int32_t>& Sequence_TypeIntrospectionExample::points()
{
    return m_points;
}

size_t Sequence_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Sequence_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void Sequence_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
