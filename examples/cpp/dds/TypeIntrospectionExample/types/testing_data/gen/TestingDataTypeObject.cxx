// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestingDataTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "TestingData.h"
#include "TestingDataTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerTestingDataTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("A", GetAIdentifier(true),
    GetAObject(true));
    factory->add_type_object("A", GetAIdentifier(false),
    GetAObject(false));

    factory->add_type_object("ZeroCopyMessage", GetZeroCopyMessageIdentifier(true),
    GetZeroCopyMessageObject(true));
    factory->add_type_object("ZeroCopyMessage", GetZeroCopyMessageIdentifier(false),
    GetZeroCopyMessageObject(false));

}

const TypeIdentifier* GetAIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("A", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetAObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("A", complete);
}

const TypeObject* GetAObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("A", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteAObject();
    }
    //else
    return GetMinimalAObject();
}

const TypeObject* GetMinimalAObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("A", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_a;
    mst_a.common().member_id(memberId++);
    mst_a.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_a.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_a.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_a.common().member_flags().IS_OPTIONAL(false);
    mst_a.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_a.common().member_flags().IS_KEY(false);
    mst_a.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_a.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 a_hash("a");
    for(int i = 0; i < 4; ++i)
    {
        mst_a.detail().name_hash()[i] = a_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_a);

    MinimalStructMember mst_b;
    mst_b.common().member_id(memberId++);
    mst_b.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_b.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_b.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_b.common().member_flags().IS_OPTIONAL(false);
    mst_b.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_b.common().member_flags().IS_KEY(false);
    mst_b.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_b.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 b_hash("b");
    for(int i = 0; i < 4; ++i)
    {
        mst_b.detail().name_hash()[i] = b_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_b);

    MinimalStructMember mst_c;
    mst_c.common().member_id(memberId++);
    mst_c.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_c.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_c.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_c.common().member_flags().IS_OPTIONAL(false);
    mst_c.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_c.common().member_flags().IS_KEY(false);
    mst_c.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_c.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 c_hash("c");
    for(int i = 0; i < 4; ++i)
    {
        mst_c.detail().name_hash()[i] = c_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_c);

    MinimalStructMember mst_d;
    mst_d.common().member_id(memberId++);
    mst_d.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_d.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_d.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_d.common().member_flags().IS_OPTIONAL(false);
    mst_d.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_d.common().member_flags().IS_KEY(false);
    mst_d.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_d.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 d_hash("d");
    for(int i = 0; i < 4; ++i)
    {
        mst_d.detail().name_hash()[i] = d_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_d);

    MinimalStructMember mst_e;
    mst_e.common().member_id(memberId++);
    mst_e.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_e.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_e.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_e.common().member_flags().IS_OPTIONAL(false);
    mst_e.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_e.common().member_flags().IS_KEY(false);
    mst_e.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_e.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 e_hash("e");
    for(int i = 0; i < 4; ++i)
    {
        mst_e.detail().name_hash()[i] = e_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_e);

    MinimalStructMember mst_f;
    mst_f.common().member_id(memberId++);
    mst_f.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_f.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_f.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_f.common().member_flags().IS_OPTIONAL(false);
    mst_f.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_f.common().member_flags().IS_KEY(false);
    mst_f.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_f.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 f_hash("f");
    for(int i = 0; i < 4; ++i)
    {
        mst_f.detail().name_hash()[i] = f_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_f);

    MinimalStructMember mst_g;
    mst_g.common().member_id(memberId++);
    mst_g.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_g.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_g.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_g.common().member_flags().IS_OPTIONAL(false);
    mst_g.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_g.common().member_flags().IS_KEY(false);
    mst_g.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_g.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 g_hash("g");
    for(int i = 0; i < 4; ++i)
    {
        mst_g.detail().name_hash()[i] = g_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_g);

    MinimalStructMember mst_h;
    mst_h.common().member_id(memberId++);
    mst_h.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_h.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_h.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_h.common().member_flags().IS_OPTIONAL(false);
    mst_h.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_h.common().member_flags().IS_KEY(false);
    mst_h.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_h.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    MD5 h_hash("h");
    for(int i = 0; i < 4; ++i)
    {
        mst_h.detail().name_hash()[i] = h_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_h);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("A", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("A", false);
}

const TypeObject* GetCompleteAObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("A", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_a;
    cst_a.common().member_id(memberId++);
    cst_a.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_a.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_a.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_a.common().member_flags().IS_OPTIONAL(false);
    cst_a.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_a.common().member_flags().IS_KEY(false);
    cst_a.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_a.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_a.detail().name("a");

    type_object->complete().struct_type().member_seq().emplace_back(cst_a);

    CompleteStructMember cst_b;
    cst_b.common().member_id(memberId++);
    cst_b.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_b.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_b.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_b.common().member_flags().IS_OPTIONAL(false);
    cst_b.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_b.common().member_flags().IS_KEY(false);
    cst_b.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_b.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_b.detail().name("b");

    type_object->complete().struct_type().member_seq().emplace_back(cst_b);

    CompleteStructMember cst_c;
    cst_c.common().member_id(memberId++);
    cst_c.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_c.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_c.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_c.common().member_flags().IS_OPTIONAL(false);
    cst_c.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_c.common().member_flags().IS_KEY(false);
    cst_c.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_c.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_c.detail().name("c");

    type_object->complete().struct_type().member_seq().emplace_back(cst_c);

    CompleteStructMember cst_d;
    cst_d.common().member_id(memberId++);
    cst_d.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_d.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_d.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_d.common().member_flags().IS_OPTIONAL(false);
    cst_d.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_d.common().member_flags().IS_KEY(false);
    cst_d.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_d.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_d.detail().name("d");

    type_object->complete().struct_type().member_seq().emplace_back(cst_d);

    CompleteStructMember cst_e;
    cst_e.common().member_id(memberId++);
    cst_e.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_e.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_e.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_e.common().member_flags().IS_OPTIONAL(false);
    cst_e.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_e.common().member_flags().IS_KEY(false);
    cst_e.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_e.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_e.detail().name("e");

    type_object->complete().struct_type().member_seq().emplace_back(cst_e);

    CompleteStructMember cst_f;
    cst_f.common().member_id(memberId++);
    cst_f.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_f.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_f.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_f.common().member_flags().IS_OPTIONAL(false);
    cst_f.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_f.common().member_flags().IS_KEY(false);
    cst_f.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_f.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_f.detail().name("f");

    type_object->complete().struct_type().member_seq().emplace_back(cst_f);

    CompleteStructMember cst_g;
    cst_g.common().member_id(memberId++);
    cst_g.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_g.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_g.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_g.common().member_flags().IS_OPTIONAL(false);
    cst_g.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_g.common().member_flags().IS_KEY(false);
    cst_g.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_g.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_g.detail().name("g");

    type_object->complete().struct_type().member_seq().emplace_back(cst_g);

    CompleteStructMember cst_h;
    cst_h.common().member_id(memberId++);
    cst_h.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_h.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_h.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_h.common().member_flags().IS_OPTIONAL(false);
    cst_h.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_h.common().member_flags().IS_KEY(false);
    cst_h.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_h.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("float", false));

    cst_h.detail().name("h");

    type_object->complete().struct_type().member_seq().emplace_back(cst_h);


    // Header
    type_object->complete().struct_type().header().detail().type_name("A");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("A", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("A", true);
}

const TypeIdentifier* GetZeroCopyMessageIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("ZeroCopyMessage", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetZeroCopyMessageObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("ZeroCopyMessage", complete);
}

const TypeObject* GetZeroCopyMessageObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("ZeroCopyMessage", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteZeroCopyMessageObject();
    }
    //else
    return GetMinimalZeroCopyMessageObject();
}

const TypeObject* GetMinimalZeroCopyMessageObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("ZeroCopyMessage", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_index;
    mst_index.common().member_id(memberId++);
    mst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_index.common().member_flags().IS_OPTIONAL(false);
    mst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_index.common().member_flags().IS_KEY(false);
    mst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 index_hash("index");
    for(int i = 0; i < 4; ++i)
    {
        mst_index.detail().name_hash()[i] = index_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_index);

    MinimalStructMember mst_time;
    mst_time.common().member_id(memberId++);
    mst_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_time.common().member_flags().IS_OPTIONAL(false);
    mst_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_time.common().member_flags().IS_KEY(false);
    mst_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    MD5 time_hash("time");
    for(int i = 0; i < 4; ++i)
    {
        mst_time.detail().name_hash()[i] = time_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_time);

    MinimalStructMember mst_message;
    mst_message.common().member_id(memberId++);
    mst_message.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_message.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_message.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_message.common().member_flags().IS_OPTIONAL(false);
    mst_message.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_message.common().member_flags().IS_KEY(false);
    mst_message.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_message.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("char", {64}, false));


    MD5 message_hash("message");
    for(int i = 0; i < 4; ++i)
    {
        mst_message.detail().name_hash()[i] = message_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_message);

    MinimalStructMember mst_a;
    mst_a.common().member_id(memberId++);
    mst_a.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_a.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_a.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_a.common().member_flags().IS_OPTIONAL(false);
    mst_a.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_a.common().member_flags().IS_KEY(false);
    mst_a.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_a.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("A", {30}, false));


    MD5 a_hash("a");
    for(int i = 0; i < 4; ++i)
    {
        mst_a.detail().name_hash()[i] = a_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_a);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("ZeroCopyMessage", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("ZeroCopyMessage", false);
}

const TypeObject* GetCompleteZeroCopyMessageObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("ZeroCopyMessage", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_index;
    cst_index.common().member_id(memberId++);
    cst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_index.common().member_flags().IS_OPTIONAL(false);
    cst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_index.common().member_flags().IS_KEY(false);
    cst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_index.detail().name("index");

    type_object->complete().struct_type().member_seq().emplace_back(cst_index);

    CompleteStructMember cst_time;
    cst_time.common().member_id(memberId++);
    cst_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_time.common().member_flags().IS_OPTIONAL(false);
    cst_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_time.common().member_flags().IS_KEY(false);
    cst_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    cst_time.detail().name("time");

    type_object->complete().struct_type().member_seq().emplace_back(cst_time);

    CompleteStructMember cst_message;
    cst_message.common().member_id(memberId++);
    cst_message.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_message.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_message.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_message.common().member_flags().IS_OPTIONAL(false);
    cst_message.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_message.common().member_flags().IS_KEY(false);
    cst_message.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_message.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("char", {64}, true));


    cst_message.detail().name("message");

    type_object->complete().struct_type().member_seq().emplace_back(cst_message);

    CompleteStructMember cst_a;
    cst_a.common().member_id(memberId++);
    cst_a.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_a.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_a.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_a.common().member_flags().IS_OPTIONAL(false);
    cst_a.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_a.common().member_flags().IS_KEY(false);
    cst_a.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_a.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("A", {30}, true));


    cst_a.detail().name("a");

    type_object->complete().struct_type().member_seq().emplace_back(cst_a);


    // Header
    type_object->complete().struct_type().header().detail().type_name("ZeroCopyMessage");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("ZeroCopyMessage", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("ZeroCopyMessage", true);
}
