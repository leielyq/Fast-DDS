// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestingData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TestingData.h"
#include "TestingDataTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

A::A()
{
    // m_a com.eprosima.idl.parser.typecode.PrimitiveTypeCode@64f6106c
    m_a = 0.0;
    // m_b com.eprosima.idl.parser.typecode.PrimitiveTypeCode@553a3d88
    m_b = 0.0;
    // m_c com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7a30d1e6
    m_c = 0.0;
    // m_d com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5891e32e
    m_d = 0.0;
    // m_e com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb0ed20
    m_e = 0.0;
    // m_f com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8e24743
    m_f = 0.0;
    // m_g com.eprosima.idl.parser.typecode.PrimitiveTypeCode@74a10858
    m_g = 0.0;
    // m_h com.eprosima.idl.parser.typecode.PrimitiveTypeCode@23fe1d71
    m_h = 0.0;

    // Just to register all known types
    registerTestingDataTypes();
}

A::~A()
{








}

A::A(
        const A& x)
{
    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;
    m_e = x.m_e;
    m_f = x.m_f;
    m_g = x.m_g;
    m_h = x.m_h;
}

A::A(
        A&& x) noexcept 
{
    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;
    m_e = x.m_e;
    m_f = x.m_f;
    m_g = x.m_g;
    m_h = x.m_h;
}

A& A::operator =(
        const A& x)
{

    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;
    m_e = x.m_e;
    m_f = x.m_f;
    m_g = x.m_g;
    m_h = x.m_h;

    return *this;
}

A& A::operator =(
        A&& x) noexcept
{

    m_a = x.m_a;
    m_b = x.m_b;
    m_c = x.m_c;
    m_d = x.m_d;
    m_e = x.m_e;
    m_f = x.m_f;
    m_g = x.m_g;
    m_h = x.m_h;

    return *this;
}

bool A::operator ==(
        const A& x) const
{

    return (m_a == x.m_a && m_b == x.m_b && m_c == x.m_c && m_d == x.m_d && m_e == x.m_e && m_f == x.m_f && m_g == x.m_g && m_h == x.m_h);
}

bool A::operator !=(
        const A& x) const
{
    return !(*this == x);
}

size_t A::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t A::getCdrSerializedSize(
        const A& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void A::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_a;
    scdr << m_b;
    scdr << m_c;
    scdr << m_d;
    scdr << m_e;
    scdr << m_f;
    scdr << m_g;
    scdr << m_h;

}

void A::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_a;
    dcdr >> m_b;
    dcdr >> m_c;
    dcdr >> m_d;
    dcdr >> m_e;
    dcdr >> m_f;
    dcdr >> m_g;
    dcdr >> m_h;
}

/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void A::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float A::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& A::a()
{
    return m_a;
}

/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void A::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float A::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& A::b()
{
    return m_b;
}

/*!
 * @brief This function sets a value in member c
 * @param _c New value for member c
 */
void A::c(
        float _c)
{
    m_c = _c;
}

/*!
 * @brief This function returns the value of member c
 * @return Value of member c
 */
float A::c() const
{
    return m_c;
}

/*!
 * @brief This function returns a reference to member c
 * @return Reference to member c
 */
float& A::c()
{
    return m_c;
}

/*!
 * @brief This function sets a value in member d
 * @param _d New value for member d
 */
void A::d(
        float _d)
{
    m_d = _d;
}

/*!
 * @brief This function returns the value of member d
 * @return Value of member d
 */
float A::d() const
{
    return m_d;
}

/*!
 * @brief This function returns a reference to member d
 * @return Reference to member d
 */
float& A::d()
{
    return m_d;
}

/*!
 * @brief This function sets a value in member e
 * @param _e New value for member e
 */
void A::e(
        float _e)
{
    m_e = _e;
}

/*!
 * @brief This function returns the value of member e
 * @return Value of member e
 */
float A::e() const
{
    return m_e;
}

/*!
 * @brief This function returns a reference to member e
 * @return Reference to member e
 */
float& A::e()
{
    return m_e;
}

/*!
 * @brief This function sets a value in member f
 * @param _f New value for member f
 */
void A::f(
        float _f)
{
    m_f = _f;
}

/*!
 * @brief This function returns the value of member f
 * @return Value of member f
 */
float A::f() const
{
    return m_f;
}

/*!
 * @brief This function returns a reference to member f
 * @return Reference to member f
 */
float& A::f()
{
    return m_f;
}

/*!
 * @brief This function sets a value in member g
 * @param _g New value for member g
 */
void A::g(
        float _g)
{
    m_g = _g;
}

/*!
 * @brief This function returns the value of member g
 * @return Value of member g
 */
float A::g() const
{
    return m_g;
}

/*!
 * @brief This function returns a reference to member g
 * @return Reference to member g
 */
float& A::g()
{
    return m_g;
}

/*!
 * @brief This function sets a value in member h
 * @param _h New value for member h
 */
void A::h(
        float _h)
{
    m_h = _h;
}

/*!
 * @brief This function returns the value of member h
 * @return Value of member h
 */
float A::h() const
{
    return m_h;
}

/*!
 * @brief This function returns a reference to member h
 * @return Reference to member h
 */
float& A::h()
{
    return m_h;
}


size_t A::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;











    return current_align;
}

bool A::isKeyDefined()
{
    return false;
}

void A::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
            
}

ZeroCopyMessage::ZeroCopyMessage()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25359ed8
    m_index = 0;
    // m_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@21a947fe
    m_time = 0;
    // m_message com.eprosima.idl.parser.typecode.ArrayTypeCode@5606c0b
    memset(&m_message, 0, (64) * 1);
    // m_a com.eprosima.idl.parser.typecode.ArrayTypeCode@80ec1f8


    // Just to register all known types
    registerTestingDataTypes();
}

ZeroCopyMessage::~ZeroCopyMessage()
{




}

ZeroCopyMessage::ZeroCopyMessage(
        const ZeroCopyMessage& x)
{
    m_index = x.m_index;
    m_time = x.m_time;
    m_message = x.m_message;
    m_a = x.m_a;
}

ZeroCopyMessage::ZeroCopyMessage(
        ZeroCopyMessage&& x) noexcept 
{
    m_index = x.m_index;
    m_time = x.m_time;
    m_message = std::move(x.m_message);
    m_a = std::move(x.m_a);
}

ZeroCopyMessage& ZeroCopyMessage::operator =(
        const ZeroCopyMessage& x)
{

    m_index = x.m_index;
    m_time = x.m_time;
    m_message = x.m_message;
    m_a = x.m_a;

    return *this;
}

ZeroCopyMessage& ZeroCopyMessage::operator =(
        ZeroCopyMessage&& x) noexcept
{

    m_index = x.m_index;
    m_time = x.m_time;
    m_message = std::move(x.m_message);
    m_a = std::move(x.m_a);

    return *this;
}

bool ZeroCopyMessage::operator ==(
        const ZeroCopyMessage& x) const
{

    return (m_index == x.m_index && m_time == x.m_time && m_message == x.m_message && m_a == x.m_a);
}

bool ZeroCopyMessage::operator !=(
        const ZeroCopyMessage& x) const
{
    return !(*this == x);
}

size_t ZeroCopyMessage::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((64) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    for(size_t a = 0; a < (30); ++a)
    {
        current_alignment += A::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t ZeroCopyMessage::getCdrSerializedSize(
        const ZeroCopyMessage& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((64) > 0)
    {
        current_alignment += ((64) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }


    for(size_t a = 0; a < data.a().size(); ++a)
    {
            current_alignment += A::getCdrSerializedSize(data.a().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void ZeroCopyMessage::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_time;
    scdr << m_message;

    scdr << m_a;


}

void ZeroCopyMessage::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_time;
    dcdr >> m_message;

    dcdr >> m_a;

}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void ZeroCopyMessage::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t ZeroCopyMessage::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& ZeroCopyMessage::index()
{
    return m_index;
}

/*!
 * @brief This function sets a value in member time
 * @param _time New value for member time
 */
void ZeroCopyMessage::time(
        uint64_t _time)
{
    m_time = _time;
}

/*!
 * @brief This function returns the value of member time
 * @return Value of member time
 */
uint64_t ZeroCopyMessage::time() const
{
    return m_time;
}

/*!
 * @brief This function returns a reference to member time
 * @return Reference to member time
 */
uint64_t& ZeroCopyMessage::time()
{
    return m_time;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void ZeroCopyMessage::message(
        const std::array<char, 64>& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void ZeroCopyMessage::message(
        std::array<char, 64>&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::array<char, 64>& ZeroCopyMessage::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::array<char, 64>& ZeroCopyMessage::message()
{
    return m_message;
}
/*!
 * @brief This function copies the value in member a
 * @param _a New value to be copied in member a
 */
void ZeroCopyMessage::a(
        const std::array<A, 30>& _a)
{
    m_a = _a;
}

/*!
 * @brief This function moves the value in member a
 * @param _a New value to be moved in member a
 */
void ZeroCopyMessage::a(
        std::array<A, 30>&& _a)
{
    m_a = std::move(_a);
}

/*!
 * @brief This function returns a constant reference to member a
 * @return Constant reference to member a
 */
const std::array<A, 30>& ZeroCopyMessage::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
std::array<A, 30>& ZeroCopyMessage::a()
{
    return m_a;
}

size_t ZeroCopyMessage::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool ZeroCopyMessage::isKeyDefined()
{
    return false;
}

void ZeroCopyMessage::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}
