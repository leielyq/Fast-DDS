// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestingData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_TESTINGDATA_H_
#define _FAST_DDS_GENERATED_TESTINGDATA_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TestingData_SOURCE)
#define TestingData_DllAPI __declspec( dllexport )
#else
#define TestingData_DllAPI __declspec( dllimport )
#endif // TestingData_SOURCE
#else
#define TestingData_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TestingData_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure A defined by the user in the IDL file.
 * @ingroup TESTINGDATA
 */
class A
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport A();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~A();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A(
            const A& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A(
            A&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A& operator =(
            const A& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object A that will be copied.
     */
    eProsima_user_DllExport A& operator =(
            A&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x A object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const A& x) const;

    /*!
     * @brief Comparison operator.
     * @param x A object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const A& x) const;

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();

    /*!
     * @brief This function sets a value in member c
     * @param _c New value for member c
     */
    eProsima_user_DllExport void c(
            float _c);

    /*!
     * @brief This function returns the value of member c
     * @return Value of member c
     */
    eProsima_user_DllExport float c() const;

    /*!
     * @brief This function returns a reference to member c
     * @return Reference to member c
     */
    eProsima_user_DllExport float& c();

    /*!
     * @brief This function sets a value in member d
     * @param _d New value for member d
     */
    eProsima_user_DllExport void d(
            float _d);

    /*!
     * @brief This function returns the value of member d
     * @return Value of member d
     */
    eProsima_user_DllExport float d() const;

    /*!
     * @brief This function returns a reference to member d
     * @return Reference to member d
     */
    eProsima_user_DllExport float& d();

    /*!
     * @brief This function sets a value in member e
     * @param _e New value for member e
     */
    eProsima_user_DllExport void e(
            float _e);

    /*!
     * @brief This function returns the value of member e
     * @return Value of member e
     */
    eProsima_user_DllExport float e() const;

    /*!
     * @brief This function returns a reference to member e
     * @return Reference to member e
     */
    eProsima_user_DllExport float& e();

    /*!
     * @brief This function sets a value in member f
     * @param _f New value for member f
     */
    eProsima_user_DllExport void f(
            float _f);

    /*!
     * @brief This function returns the value of member f
     * @return Value of member f
     */
    eProsima_user_DllExport float f() const;

    /*!
     * @brief This function returns a reference to member f
     * @return Reference to member f
     */
    eProsima_user_DllExport float& f();

    /*!
     * @brief This function sets a value in member g
     * @param _g New value for member g
     */
    eProsima_user_DllExport void g(
            float _g);

    /*!
     * @brief This function returns the value of member g
     * @return Value of member g
     */
    eProsima_user_DllExport float g() const;

    /*!
     * @brief This function returns a reference to member g
     * @return Reference to member g
     */
    eProsima_user_DllExport float& g();

    /*!
     * @brief This function sets a value in member h
     * @param _h New value for member h
     */
    eProsima_user_DllExport void h(
            float _h);

    /*!
     * @brief This function returns the value of member h
     * @return Value of member h
     */
    eProsima_user_DllExport float h() const;

    /*!
     * @brief This function returns a reference to member h
     * @return Reference to member h
     */
    eProsima_user_DllExport float& h();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const A& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_a;
    float m_b;
    float m_c;
    float m_d;
    float m_e;
    float m_f;
    float m_g;
    float m_h;
};
/*!
 * @brief This class represents the structure ZeroCopyMessage defined by the user in the IDL file.
 * @ingroup TESTINGDATA
 */
class ZeroCopyMessage
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ZeroCopyMessage();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ZeroCopyMessage();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ZeroCopyMessage that will be copied.
     */
    eProsima_user_DllExport ZeroCopyMessage(
            const ZeroCopyMessage& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ZeroCopyMessage that will be copied.
     */
    eProsima_user_DllExport ZeroCopyMessage(
            ZeroCopyMessage&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ZeroCopyMessage that will be copied.
     */
    eProsima_user_DllExport ZeroCopyMessage& operator =(
            const ZeroCopyMessage& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ZeroCopyMessage that will be copied.
     */
    eProsima_user_DllExport ZeroCopyMessage& operator =(
            ZeroCopyMessage&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ZeroCopyMessage object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ZeroCopyMessage& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ZeroCopyMessage object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ZeroCopyMessage& x) const;

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();

    /*!
     * @brief This function sets a value in member time
     * @param _time New value for member time
     */
    eProsima_user_DllExport void time(
            uint64_t _time);

    /*!
     * @brief This function returns the value of member time
     * @return Value of member time
     */
    eProsima_user_DllExport uint64_t time() const;

    /*!
     * @brief This function returns a reference to member time
     * @return Reference to member time
     */
    eProsima_user_DllExport uint64_t& time();

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::array<char, 64>& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::array<char, 64>&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::array<char, 64>& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::array<char, 64>& message();
    /*!
     * @brief This function copies the value in member a
     * @param _a New value to be copied in member a
     */
    eProsima_user_DllExport void a(
            const std::array<A, 30>& _a);

    /*!
     * @brief This function moves the value in member a
     * @param _a New value to be moved in member a
     */
    eProsima_user_DllExport void a(
            std::array<A, 30>&& _a);

    /*!
     * @brief This function returns a constant reference to member a
     * @return Constant reference to member a
     */
    eProsima_user_DllExport const std::array<A, 30>& a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport std::array<A, 30>& a();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ZeroCopyMessage& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_index;
    uint64_t m_time;
    std::array<char, 64> m_message;
    std::array<A, 30> m_a;
};

#endif // _FAST_DDS_GENERATED_TESTINGDATA_H_