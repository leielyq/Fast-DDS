// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SuperComplexTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "SuperComplex.h"
#include "SuperComplexTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerSuperComplexTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("InternalTimestamp_TypeIntrospectionExample", GetInternalTimestamp_TypeIntrospectionExampleIdentifier(true),
    GetInternalTimestamp_TypeIntrospectionExampleObject(true));
    factory->add_type_object("InternalTimestamp_TypeIntrospectionExample", GetInternalTimestamp_TypeIntrospectionExampleIdentifier(false),
    GetInternalTimestamp_TypeIntrospectionExampleObject(false));

    factory->add_type_object("InternalPoints_TypeIntrospectionExample", GetInternalPoints_TypeIntrospectionExampleIdentifier(true),
    GetInternalPoints_TypeIntrospectionExampleObject(true));
    factory->add_type_object("InternalPoints_TypeIntrospectionExample", GetInternalPoints_TypeIntrospectionExampleIdentifier(false),
    GetInternalPoints_TypeIntrospectionExampleObject(false));

    factory->add_type_object("InternalMsgDescriptor_TypeIntrospectionExample", GetInternalMsgDescriptor_TypeIntrospectionExampleIdentifier(true),
    GetInternalMsgDescriptor_TypeIntrospectionExampleObject(true));
    factory->add_type_object("InternalMsgDescriptor_TypeIntrospectionExample", GetInternalMsgDescriptor_TypeIntrospectionExampleIdentifier(false),
    GetInternalMsgDescriptor_TypeIntrospectionExampleObject(false));

    factory->add_type_object("InternalMessage_TypeIntrospectionExample", GetInternalMessage_TypeIntrospectionExampleIdentifier(true),
    GetInternalMessage_TypeIntrospectionExampleObject(true));
    factory->add_type_object("InternalMessage_TypeIntrospectionExample", GetInternalMessage_TypeIntrospectionExampleIdentifier(false),
    GetInternalMessage_TypeIntrospectionExampleObject(false));

    factory->add_type_object("SuperComplex_TypeIntrospectionExample", GetSuperComplex_TypeIntrospectionExampleIdentifier(true),
    GetSuperComplex_TypeIntrospectionExampleObject(true));
    factory->add_type_object("SuperComplex_TypeIntrospectionExample", GetSuperComplex_TypeIntrospectionExampleIdentifier(false),
    GetSuperComplex_TypeIntrospectionExampleObject(false));

}

const TypeIdentifier* GetInternalTimestamp_TypeIntrospectionExampleIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InternalTimestamp_TypeIntrospectionExample", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInternalTimestamp_TypeIntrospectionExampleObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InternalTimestamp_TypeIntrospectionExample", complete);
}

const TypeObject* GetInternalTimestamp_TypeIntrospectionExampleObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalTimestamp_TypeIntrospectionExample", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInternalTimestamp_TypeIntrospectionExampleObject();
    }
    //else
    return GetMinimalInternalTimestamp_TypeIntrospectionExampleObject();
}

const TypeObject* GetMinimalInternalTimestamp_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalTimestamp_TypeIntrospectionExample", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_seconds;
    mst_seconds.common().member_id(memberId++);
    mst_seconds.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_seconds.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_seconds.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_seconds.common().member_flags().IS_OPTIONAL(false);
    mst_seconds.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_seconds.common().member_flags().IS_KEY(false);
    mst_seconds.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_seconds.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    MD5 seconds_hash("seconds");
    for(int i = 0; i < 4; ++i)
    {
        mst_seconds.detail().name_hash()[i] = seconds_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_seconds);

    MinimalStructMember mst_milliseconds;
    mst_milliseconds.common().member_id(memberId++);
    mst_milliseconds.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_milliseconds.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_milliseconds.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_milliseconds.common().member_flags().IS_OPTIONAL(false);
    mst_milliseconds.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_milliseconds.common().member_flags().IS_KEY(false);
    mst_milliseconds.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_milliseconds.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    MD5 milliseconds_hash("milliseconds");
    for(int i = 0; i < 4; ++i)
    {
        mst_milliseconds.detail().name_hash()[i] = milliseconds_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_milliseconds);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalTimestamp_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalTimestamp_TypeIntrospectionExample", false);
}

const TypeObject* GetCompleteInternalTimestamp_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalTimestamp_TypeIntrospectionExample", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_seconds;
    cst_seconds.common().member_id(memberId++);
    cst_seconds.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_seconds.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_seconds.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_seconds.common().member_flags().IS_OPTIONAL(false);
    cst_seconds.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_seconds.common().member_flags().IS_KEY(false);
    cst_seconds.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_seconds.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    cst_seconds.detail().name("seconds");

    type_object->complete().struct_type().member_seq().emplace_back(cst_seconds);

    CompleteStructMember cst_milliseconds;
    cst_milliseconds.common().member_id(memberId++);
    cst_milliseconds.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_milliseconds.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_milliseconds.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_milliseconds.common().member_flags().IS_OPTIONAL(false);
    cst_milliseconds.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_milliseconds.common().member_flags().IS_KEY(false);
    cst_milliseconds.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_milliseconds.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    cst_milliseconds.detail().name("milliseconds");

    type_object->complete().struct_type().member_seq().emplace_back(cst_milliseconds);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InternalTimestamp_TypeIntrospectionExample");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalTimestamp_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalTimestamp_TypeIntrospectionExample", true);
}

const TypeIdentifier* GetInternalPoints_TypeIntrospectionExampleIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InternalPoints_TypeIntrospectionExample", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInternalPoints_TypeIntrospectionExampleObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InternalPoints_TypeIntrospectionExample", complete);
}

const TypeObject* GetInternalPoints_TypeIntrospectionExampleObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalPoints_TypeIntrospectionExample", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInternalPoints_TypeIntrospectionExampleObject();
    }
    //else
    return GetMinimalInternalPoints_TypeIntrospectionExampleObject();
}

const TypeObject* GetMinimalInternalPoints_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalPoints_TypeIntrospectionExample", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_x_member;
    mst_x_member.common().member_id(memberId++);
    mst_x_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_x_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_x_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_x_member.common().member_flags().IS_OPTIONAL(false);
    mst_x_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_x_member.common().member_flags().IS_KEY(false);
    mst_x_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_x_member.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    MD5 x_member_hash("x_member");
    for(int i = 0; i < 4; ++i)
    {
        mst_x_member.detail().name_hash()[i] = x_member_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_x_member);

    MinimalStructMember mst_y_member;
    mst_y_member.common().member_id(memberId++);
    mst_y_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_y_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_y_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_y_member.common().member_flags().IS_OPTIONAL(false);
    mst_y_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_y_member.common().member_flags().IS_KEY(false);
    mst_y_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_y_member.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    MD5 y_member_hash("y_member");
    for(int i = 0; i < 4; ++i)
    {
        mst_y_member.detail().name_hash()[i] = y_member_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_y_member);

    MinimalStructMember mst_z_member;
    mst_z_member.common().member_id(memberId++);
    mst_z_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_z_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_z_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_z_member.common().member_flags().IS_OPTIONAL(false);
    mst_z_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_z_member.common().member_flags().IS_KEY(false);
    mst_z_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_z_member.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    MD5 z_member_hash("z_member");
    for(int i = 0; i < 4; ++i)
    {
        mst_z_member.detail().name_hash()[i] = z_member_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_z_member);

    MinimalStructMember mst_t_member;
    mst_t_member.common().member_id(memberId++);
    mst_t_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_t_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_t_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_t_member.common().member_flags().IS_OPTIONAL(false);
    mst_t_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_t_member.common().member_flags().IS_KEY(false);
    mst_t_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_t_member.common().member_type_id(*GetInternalTimestamp_TypeIntrospectionExampleIdentifier(false));
    MD5 t_member_hash("t_member");
    for(int i = 0; i < 4; ++i)
    {
        mst_t_member.detail().name_hash()[i] = t_member_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_t_member);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalPoints_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalPoints_TypeIntrospectionExample", false);
}

const TypeObject* GetCompleteInternalPoints_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalPoints_TypeIntrospectionExample", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_x_member;
    cst_x_member.common().member_id(memberId++);
    cst_x_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_x_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_x_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_x_member.common().member_flags().IS_OPTIONAL(false);
    cst_x_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_x_member.common().member_flags().IS_KEY(false);
    cst_x_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_x_member.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    cst_x_member.detail().name("x_member");

    type_object->complete().struct_type().member_seq().emplace_back(cst_x_member);

    CompleteStructMember cst_y_member;
    cst_y_member.common().member_id(memberId++);
    cst_y_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_y_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_y_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_y_member.common().member_flags().IS_OPTIONAL(false);
    cst_y_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_y_member.common().member_flags().IS_KEY(false);
    cst_y_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_y_member.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    cst_y_member.detail().name("y_member");

    type_object->complete().struct_type().member_seq().emplace_back(cst_y_member);

    CompleteStructMember cst_z_member;
    cst_z_member.common().member_id(memberId++);
    cst_z_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_z_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_z_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_z_member.common().member_flags().IS_OPTIONAL(false);
    cst_z_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_z_member.common().member_flags().IS_KEY(false);
    cst_z_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_z_member.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));

    cst_z_member.detail().name("z_member");

    type_object->complete().struct_type().member_seq().emplace_back(cst_z_member);

    CompleteStructMember cst_t_member;
    cst_t_member.common().member_id(memberId++);
    cst_t_member.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_t_member.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_t_member.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_t_member.common().member_flags().IS_OPTIONAL(false);
    cst_t_member.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_t_member.common().member_flags().IS_KEY(false);
    cst_t_member.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_t_member.common().member_type_id(*GetInternalTimestamp_TypeIntrospectionExampleIdentifier(true));
    cst_t_member.detail().name("t_member");

    type_object->complete().struct_type().member_seq().emplace_back(cst_t_member);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InternalPoints_TypeIntrospectionExample");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalPoints_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalPoints_TypeIntrospectionExample", true);
}

const TypeIdentifier* GetInternalMsgDescriptor_TypeIntrospectionExampleIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InternalMsgDescriptor_TypeIntrospectionExample", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInternalMsgDescriptor_TypeIntrospectionExampleObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InternalMsgDescriptor_TypeIntrospectionExample", complete);
}

const TypeObject* GetInternalMsgDescriptor_TypeIntrospectionExampleObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalMsgDescriptor_TypeIntrospectionExample", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInternalMsgDescriptor_TypeIntrospectionExampleObject();
    }
    //else
    return GetMinimalInternalMsgDescriptor_TypeIntrospectionExampleObject();
}

const TypeObject* GetMinimalInternalMsgDescriptor_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalMsgDescriptor_TypeIntrospectionExample", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_id;
    mst_id.common().member_id(memberId++);
    mst_id.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_id.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_id.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_id.common().member_flags().IS_OPTIONAL(false);
    mst_id.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_id.common().member_flags().IS_KEY(false);
    mst_id.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_id.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 id_hash("id");
    for(int i = 0; i < 4; ++i)
    {
        mst_id.detail().name_hash()[i] = id_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_id);

    MinimalStructMember mst_topic;
    mst_topic.common().member_id(memberId++);
    mst_topic.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_topic.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_topic.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_topic.common().member_flags().IS_OPTIONAL(false);
    mst_topic.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_topic.common().member_flags().IS_KEY(false);
    mst_topic.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_topic.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 topic_hash("topic");
    for(int i = 0; i < 4; ++i)
    {
        mst_topic.detail().name_hash()[i] = topic_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_topic);

    MinimalStructMember mst_timestamp;
    mst_timestamp.common().member_id(memberId++);
    mst_timestamp.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_timestamp.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_timestamp.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_timestamp.common().member_flags().IS_OPTIONAL(false);
    mst_timestamp.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_timestamp.common().member_flags().IS_KEY(false);
    mst_timestamp.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_timestamp.common().member_type_id(*GetInternalTimestamp_TypeIntrospectionExampleIdentifier(false));
    MD5 timestamp_hash("timestamp");
    for(int i = 0; i < 4; ++i)
    {
        mst_timestamp.detail().name_hash()[i] = timestamp_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_timestamp);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalMsgDescriptor_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalMsgDescriptor_TypeIntrospectionExample", false);
}

const TypeObject* GetCompleteInternalMsgDescriptor_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalMsgDescriptor_TypeIntrospectionExample", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_id;
    cst_id.common().member_id(memberId++);
    cst_id.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_id.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_id.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_id.common().member_flags().IS_OPTIONAL(false);
    cst_id.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_id.common().member_flags().IS_KEY(false);
    cst_id.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_id.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_id.detail().name("id");

    type_object->complete().struct_type().member_seq().emplace_back(cst_id);

    CompleteStructMember cst_topic;
    cst_topic.common().member_id(memberId++);
    cst_topic.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_topic.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_topic.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_topic.common().member_flags().IS_OPTIONAL(false);
    cst_topic.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_topic.common().member_flags().IS_KEY(false);
    cst_topic.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_topic.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_topic.detail().name("topic");

    type_object->complete().struct_type().member_seq().emplace_back(cst_topic);

    CompleteStructMember cst_timestamp;
    cst_timestamp.common().member_id(memberId++);
    cst_timestamp.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_timestamp.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_timestamp.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_timestamp.common().member_flags().IS_OPTIONAL(false);
    cst_timestamp.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_timestamp.common().member_flags().IS_KEY(false);
    cst_timestamp.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_timestamp.common().member_type_id(*GetInternalTimestamp_TypeIntrospectionExampleIdentifier(true));
    cst_timestamp.detail().name("timestamp");

    type_object->complete().struct_type().member_seq().emplace_back(cst_timestamp);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InternalMsgDescriptor_TypeIntrospectionExample");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalMsgDescriptor_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalMsgDescriptor_TypeIntrospectionExample", true);
}

const TypeIdentifier* GetInternalMessage_TypeIntrospectionExampleIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InternalMessage_TypeIntrospectionExample", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInternalMessage_TypeIntrospectionExampleObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InternalMessage_TypeIntrospectionExample", complete);
}

const TypeObject* GetInternalMessage_TypeIntrospectionExampleObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalMessage_TypeIntrospectionExample", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInternalMessage_TypeIntrospectionExampleObject();
    }
    //else
    return GetMinimalInternalMessage_TypeIntrospectionExampleObject();
}

const TypeObject* GetMinimalInternalMessage_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalMessage_TypeIntrospectionExample", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_descriptor;
    mst_descriptor.common().member_id(memberId++);
    mst_descriptor.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_descriptor.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_descriptor.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_descriptor.common().member_flags().IS_OPTIONAL(false);
    mst_descriptor.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_descriptor.common().member_flags().IS_KEY(false);
    mst_descriptor.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_descriptor.common().member_type_id(*GetInternalMsgDescriptor_TypeIntrospectionExampleIdentifier(false));
    MD5 descriptor_hash("descriptor");
    for(int i = 0; i < 4; ++i)
    {
        mst_descriptor.detail().name_hash()[i] = descriptor_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_descriptor);

    MinimalStructMember mst_message;
    mst_message.common().member_id(memberId++);
    mst_message.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_message.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_message.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_message.common().member_flags().IS_OPTIONAL(false);
    mst_message.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_message.common().member_flags().IS_KEY(false);
    mst_message.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_message.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 message_hash("message");
    for(int i = 0; i < 4; ++i)
    {
        mst_message.detail().name_hash()[i] = message_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_message);

    MinimalStructMember mst_timestamps;
    mst_timestamps.common().member_id(memberId++);
    mst_timestamps.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_timestamps.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_timestamps.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_timestamps.common().member_flags().IS_OPTIONAL(false);
    mst_timestamps.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_timestamps.common().member_flags().IS_KEY(false);
    mst_timestamps.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_timestamps.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("InternalTimestamp_TypeIntrospectionExample", {2}, false));


    MD5 timestamps_hash("timestamps");
    for(int i = 0; i < 4; ++i)
    {
        mst_timestamps.detail().name_hash()[i] = timestamps_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_timestamps);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalMessage_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalMessage_TypeIntrospectionExample", false);
}

const TypeObject* GetCompleteInternalMessage_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InternalMessage_TypeIntrospectionExample", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_descriptor;
    cst_descriptor.common().member_id(memberId++);
    cst_descriptor.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_descriptor.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_descriptor.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_descriptor.common().member_flags().IS_OPTIONAL(false);
    cst_descriptor.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_descriptor.common().member_flags().IS_KEY(false);
    cst_descriptor.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_descriptor.common().member_type_id(*GetInternalMsgDescriptor_TypeIntrospectionExampleIdentifier(true));
    cst_descriptor.detail().name("descriptor");

    type_object->complete().struct_type().member_seq().emplace_back(cst_descriptor);

    CompleteStructMember cst_message;
    cst_message.common().member_id(memberId++);
    cst_message.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_message.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_message.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_message.common().member_flags().IS_OPTIONAL(false);
    cst_message.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_message.common().member_flags().IS_KEY(false);
    cst_message.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_message.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_message.detail().name("message");

    type_object->complete().struct_type().member_seq().emplace_back(cst_message);

    CompleteStructMember cst_timestamps;
    cst_timestamps.common().member_id(memberId++);
    cst_timestamps.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_timestamps.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_timestamps.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_timestamps.common().member_flags().IS_OPTIONAL(false);
    cst_timestamps.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_timestamps.common().member_flags().IS_KEY(false);
    cst_timestamps.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_timestamps.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("InternalTimestamp_TypeIntrospectionExample", {2}, true));


    cst_timestamps.detail().name("timestamps");

    type_object->complete().struct_type().member_seq().emplace_back(cst_timestamps);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InternalMessage_TypeIntrospectionExample");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InternalMessage_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InternalMessage_TypeIntrospectionExample", true);
}

const TypeIdentifier* GetSuperComplex_TypeIntrospectionExampleIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("SuperComplex_TypeIntrospectionExample", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetSuperComplex_TypeIntrospectionExampleObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("SuperComplex_TypeIntrospectionExample", complete);
}

const TypeObject* GetSuperComplex_TypeIntrospectionExampleObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("SuperComplex_TypeIntrospectionExample", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteSuperComplex_TypeIntrospectionExampleObject();
    }
    //else
    return GetMinimalSuperComplex_TypeIntrospectionExampleObject();
}

const TypeObject* GetMinimalSuperComplex_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("SuperComplex_TypeIntrospectionExample", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_index;
    mst_index.common().member_id(memberId++);
    mst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_index.common().member_flags().IS_OPTIONAL(false);
    mst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_index.common().member_flags().IS_KEY(false);
    mst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    MD5 index_hash("index");
    for(int i = 0; i < 4; ++i)
    {
        mst_index.detail().name_hash()[i] = index_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_index);

    MinimalStructMember mst_main_point;
    mst_main_point.common().member_id(memberId++);
    mst_main_point.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_main_point.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_main_point.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_main_point.common().member_flags().IS_OPTIONAL(false);
    mst_main_point.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_main_point.common().member_flags().IS_KEY(false);
    mst_main_point.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_main_point.common().member_type_id(*GetInternalPoints_TypeIntrospectionExampleIdentifier(false));
    MD5 main_point_hash("main_point");
    for(int i = 0; i < 4; ++i)
    {
        mst_main_point.detail().name_hash()[i] = main_point_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_main_point);

    MinimalStructMember mst_internal_data;
    mst_internal_data.common().member_id(memberId++);
    mst_internal_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_internal_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_internal_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_internal_data.common().member_flags().IS_OPTIONAL(false);
    mst_internal_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_internal_data.common().member_flags().IS_KEY(false);
    mst_internal_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_internal_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("InternalPoints_TypeIntrospectionExample", 0, false));


    MD5 internal_data_hash("internal_data");
    for(int i = 0; i < 4; ++i)
    {
        mst_internal_data.detail().name_hash()[i] = internal_data_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_internal_data);

    MinimalStructMember mst_internal_data_bounded;
    mst_internal_data_bounded.common().member_id(memberId++);
    mst_internal_data_bounded.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_internal_data_bounded.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_internal_data_bounded.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_internal_data_bounded.common().member_flags().IS_OPTIONAL(false);
    mst_internal_data_bounded.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_internal_data_bounded.common().member_flags().IS_KEY(false);
    mst_internal_data_bounded.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_internal_data_bounded.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("InternalPoints_TypeIntrospectionExample", 3, false));


    MD5 internal_data_bounded_hash("internal_data_bounded");
    for(int i = 0; i < 4; ++i)
    {
        mst_internal_data_bounded.detail().name_hash()[i] = internal_data_bounded_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_internal_data_bounded);

    MinimalStructMember mst_messages;
    mst_messages.common().member_id(memberId++);
    mst_messages.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_messages.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_messages.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_messages.common().member_flags().IS_OPTIONAL(false);
    mst_messages.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_messages.common().member_flags().IS_KEY(false);
    mst_messages.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_messages.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("InternalMessage_TypeIntrospectionExample", {2}, false));


    MD5 messages_hash("messages");
    for(int i = 0; i < 4; ++i)
    {
        mst_messages.detail().name_hash()[i] = messages_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_messages);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("SuperComplex_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("SuperComplex_TypeIntrospectionExample", false);
}

const TypeObject* GetCompleteSuperComplex_TypeIntrospectionExampleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("SuperComplex_TypeIntrospectionExample", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_index;
    cst_index.common().member_id(memberId++);
    cst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_index.common().member_flags().IS_OPTIONAL(false);
    cst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_index.common().member_flags().IS_KEY(false);
    cst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint32_t", false));

    cst_index.detail().name("index");

    type_object->complete().struct_type().member_seq().emplace_back(cst_index);

    CompleteStructMember cst_main_point;
    cst_main_point.common().member_id(memberId++);
    cst_main_point.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_main_point.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_main_point.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_main_point.common().member_flags().IS_OPTIONAL(false);
    cst_main_point.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_main_point.common().member_flags().IS_KEY(false);
    cst_main_point.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_main_point.common().member_type_id(*GetInternalPoints_TypeIntrospectionExampleIdentifier(true));
    cst_main_point.detail().name("main_point");

    type_object->complete().struct_type().member_seq().emplace_back(cst_main_point);

    CompleteStructMember cst_internal_data;
    cst_internal_data.common().member_id(memberId++);
    cst_internal_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_internal_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_internal_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_internal_data.common().member_flags().IS_OPTIONAL(false);
    cst_internal_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_internal_data.common().member_flags().IS_KEY(false);
    cst_internal_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_internal_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("InternalPoints_TypeIntrospectionExample", 0, true));


    cst_internal_data.detail().name("internal_data");

    type_object->complete().struct_type().member_seq().emplace_back(cst_internal_data);

    CompleteStructMember cst_internal_data_bounded;
    cst_internal_data_bounded.common().member_id(memberId++);
    cst_internal_data_bounded.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_internal_data_bounded.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_internal_data_bounded.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_internal_data_bounded.common().member_flags().IS_OPTIONAL(false);
    cst_internal_data_bounded.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_internal_data_bounded.common().member_flags().IS_KEY(false);
    cst_internal_data_bounded.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_internal_data_bounded.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("InternalPoints_TypeIntrospectionExample", 3, true));


    cst_internal_data_bounded.detail().name("internal_data_bounded");

    type_object->complete().struct_type().member_seq().emplace_back(cst_internal_data_bounded);

    CompleteStructMember cst_messages;
    cst_messages.common().member_id(memberId++);
    cst_messages.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_messages.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_messages.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_messages.common().member_flags().IS_OPTIONAL(false);
    cst_messages.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_messages.common().member_flags().IS_KEY(false);
    cst_messages.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_messages.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("InternalMessage_TypeIntrospectionExample", {2}, true));


    cst_messages.detail().name("messages");

    type_object->complete().struct_type().member_seq().emplace_back(cst_messages);


    // Header
    type_object->complete().struct_type().header().detail().type_name("SuperComplex_TypeIntrospectionExample");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("SuperComplex_TypeIntrospectionExample", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("SuperComplex_TypeIntrospectionExample", true);
}
