// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SuperComplex.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SuperComplex.h"
#include "SuperComplexTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

InternalTimestamp_TypeIntrospectionExample::InternalTimestamp_TypeIntrospectionExample()
{
    // m_seconds com.eprosima.idl.parser.typecode.PrimitiveTypeCode@32eebfca
    m_seconds = 0;
    // m_milliseconds com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e718207
    m_milliseconds = 0;

    // Just to register all known types
    registerSuperComplexTypes();
}

InternalTimestamp_TypeIntrospectionExample::~InternalTimestamp_TypeIntrospectionExample()
{


}

InternalTimestamp_TypeIntrospectionExample::InternalTimestamp_TypeIntrospectionExample(
        const InternalTimestamp_TypeIntrospectionExample& x)
{
    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;
}

InternalTimestamp_TypeIntrospectionExample::InternalTimestamp_TypeIntrospectionExample(
        InternalTimestamp_TypeIntrospectionExample&& x) noexcept 
{
    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;
}

InternalTimestamp_TypeIntrospectionExample& InternalTimestamp_TypeIntrospectionExample::operator =(
        const InternalTimestamp_TypeIntrospectionExample& x)
{

    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;

    return *this;
}

InternalTimestamp_TypeIntrospectionExample& InternalTimestamp_TypeIntrospectionExample::operator =(
        InternalTimestamp_TypeIntrospectionExample&& x) noexcept
{

    m_seconds = x.m_seconds;
    m_milliseconds = x.m_milliseconds;

    return *this;
}

bool InternalTimestamp_TypeIntrospectionExample::operator ==(
        const InternalTimestamp_TypeIntrospectionExample& x) const
{

    return (m_seconds == x.m_seconds && m_milliseconds == x.m_milliseconds);
}

bool InternalTimestamp_TypeIntrospectionExample::operator !=(
        const InternalTimestamp_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalTimestamp_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t InternalTimestamp_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalTimestamp_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void InternalTimestamp_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seconds;
    scdr << m_milliseconds;

}

void InternalTimestamp_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seconds;
    dcdr >> m_milliseconds;
}

/*!
 * @brief This function sets a value in member seconds
 * @param _seconds New value for member seconds
 */
void InternalTimestamp_TypeIntrospectionExample::seconds(
        int32_t _seconds)
{
    m_seconds = _seconds;
}

/*!
 * @brief This function returns the value of member seconds
 * @return Value of member seconds
 */
int32_t InternalTimestamp_TypeIntrospectionExample::seconds() const
{
    return m_seconds;
}

/*!
 * @brief This function returns a reference to member seconds
 * @return Reference to member seconds
 */
int32_t& InternalTimestamp_TypeIntrospectionExample::seconds()
{
    return m_seconds;
}

/*!
 * @brief This function sets a value in member milliseconds
 * @param _milliseconds New value for member milliseconds
 */
void InternalTimestamp_TypeIntrospectionExample::milliseconds(
        int32_t _milliseconds)
{
    m_milliseconds = _milliseconds;
}

/*!
 * @brief This function returns the value of member milliseconds
 * @return Value of member milliseconds
 */
int32_t InternalTimestamp_TypeIntrospectionExample::milliseconds() const
{
    return m_milliseconds;
}

/*!
 * @brief This function returns a reference to member milliseconds
 * @return Reference to member milliseconds
 */
int32_t& InternalTimestamp_TypeIntrospectionExample::milliseconds()
{
    return m_milliseconds;
}


size_t InternalTimestamp_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool InternalTimestamp_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalTimestamp_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

InternalPoints_TypeIntrospectionExample::InternalPoints_TypeIntrospectionExample()
{
    // m_x_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e4aea35
    m_x_member = 0;
    // m_y_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1442d7b5
    m_y_member = 0;
    // m_z_member com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1efee8e7
    m_z_member = 0;
    // m_t_member com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1ee807c6


    // Just to register all known types
    registerSuperComplexTypes();
}

InternalPoints_TypeIntrospectionExample::~InternalPoints_TypeIntrospectionExample()
{




}

InternalPoints_TypeIntrospectionExample::InternalPoints_TypeIntrospectionExample(
        const InternalPoints_TypeIntrospectionExample& x)
{
    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
    m_t_member = x.m_t_member;
}

InternalPoints_TypeIntrospectionExample::InternalPoints_TypeIntrospectionExample(
        InternalPoints_TypeIntrospectionExample&& x) noexcept 
{
    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
    m_t_member = std::move(x.m_t_member);
}

InternalPoints_TypeIntrospectionExample& InternalPoints_TypeIntrospectionExample::operator =(
        const InternalPoints_TypeIntrospectionExample& x)
{

    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
    m_t_member = x.m_t_member;

    return *this;
}

InternalPoints_TypeIntrospectionExample& InternalPoints_TypeIntrospectionExample::operator =(
        InternalPoints_TypeIntrospectionExample&& x) noexcept
{

    m_x_member = x.m_x_member;
    m_y_member = x.m_y_member;
    m_z_member = x.m_z_member;
    m_t_member = std::move(x.m_t_member);

    return *this;
}

bool InternalPoints_TypeIntrospectionExample::operator ==(
        const InternalPoints_TypeIntrospectionExample& x) const
{

    return (m_x_member == x.m_x_member && m_y_member == x.m_y_member && m_z_member == x.m_z_member && m_t_member == x.m_t_member);
}

bool InternalPoints_TypeIntrospectionExample::operator !=(
        const InternalPoints_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += InternalTimestamp_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t InternalPoints_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalPoints_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += InternalTimestamp_TypeIntrospectionExample::getCdrSerializedSize(data.t_member(), current_alignment);

    return current_alignment - initial_alignment;
}

void InternalPoints_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x_member;
    scdr << m_y_member;
    scdr << m_z_member;
    scdr << m_t_member;

}

void InternalPoints_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x_member;
    dcdr >> m_y_member;
    dcdr >> m_z_member;
    dcdr >> m_t_member;
}

/*!
 * @brief This function sets a value in member x_member
 * @param _x_member New value for member x_member
 */
void InternalPoints_TypeIntrospectionExample::x_member(
        int32_t _x_member)
{
    m_x_member = _x_member;
}

/*!
 * @brief This function returns the value of member x_member
 * @return Value of member x_member
 */
int32_t InternalPoints_TypeIntrospectionExample::x_member() const
{
    return m_x_member;
}

/*!
 * @brief This function returns a reference to member x_member
 * @return Reference to member x_member
 */
int32_t& InternalPoints_TypeIntrospectionExample::x_member()
{
    return m_x_member;
}

/*!
 * @brief This function sets a value in member y_member
 * @param _y_member New value for member y_member
 */
void InternalPoints_TypeIntrospectionExample::y_member(
        int32_t _y_member)
{
    m_y_member = _y_member;
}

/*!
 * @brief This function returns the value of member y_member
 * @return Value of member y_member
 */
int32_t InternalPoints_TypeIntrospectionExample::y_member() const
{
    return m_y_member;
}

/*!
 * @brief This function returns a reference to member y_member
 * @return Reference to member y_member
 */
int32_t& InternalPoints_TypeIntrospectionExample::y_member()
{
    return m_y_member;
}

/*!
 * @brief This function sets a value in member z_member
 * @param _z_member New value for member z_member
 */
void InternalPoints_TypeIntrospectionExample::z_member(
        int32_t _z_member)
{
    m_z_member = _z_member;
}

/*!
 * @brief This function returns the value of member z_member
 * @return Value of member z_member
 */
int32_t InternalPoints_TypeIntrospectionExample::z_member() const
{
    return m_z_member;
}

/*!
 * @brief This function returns a reference to member z_member
 * @return Reference to member z_member
 */
int32_t& InternalPoints_TypeIntrospectionExample::z_member()
{
    return m_z_member;
}

/*!
 * @brief This function copies the value in member t_member
 * @param _t_member New value to be copied in member t_member
 */
void InternalPoints_TypeIntrospectionExample::t_member(
        const InternalTimestamp_TypeIntrospectionExample& _t_member)
{
    m_t_member = _t_member;
}

/*!
 * @brief This function moves the value in member t_member
 * @param _t_member New value to be moved in member t_member
 */
void InternalPoints_TypeIntrospectionExample::t_member(
        InternalTimestamp_TypeIntrospectionExample&& _t_member)
{
    m_t_member = std::move(_t_member);
}

/*!
 * @brief This function returns a constant reference to member t_member
 * @return Constant reference to member t_member
 */
const InternalTimestamp_TypeIntrospectionExample& InternalPoints_TypeIntrospectionExample::t_member() const
{
    return m_t_member;
}

/*!
 * @brief This function returns a reference to member t_member
 * @return Reference to member t_member
 */
InternalTimestamp_TypeIntrospectionExample& InternalPoints_TypeIntrospectionExample::t_member()
{
    return m_t_member;
}

size_t InternalPoints_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool InternalPoints_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalPoints_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

InternalMsgDescriptor_TypeIntrospectionExample::InternalMsgDescriptor_TypeIntrospectionExample()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76329302
    m_id = 0;
    // m_topic com.eprosima.idl.parser.typecode.StringTypeCode@5e25a92e
    m_topic ="";
    // m_timestamp com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@1ee807c6


    // Just to register all known types
    registerSuperComplexTypes();
}

InternalMsgDescriptor_TypeIntrospectionExample::~InternalMsgDescriptor_TypeIntrospectionExample()
{



}

InternalMsgDescriptor_TypeIntrospectionExample::InternalMsgDescriptor_TypeIntrospectionExample(
        const InternalMsgDescriptor_TypeIntrospectionExample& x)
{
    m_id = x.m_id;
    m_topic = x.m_topic;
    m_timestamp = x.m_timestamp;
}

InternalMsgDescriptor_TypeIntrospectionExample::InternalMsgDescriptor_TypeIntrospectionExample(
        InternalMsgDescriptor_TypeIntrospectionExample&& x) noexcept 
{
    m_id = x.m_id;
    m_topic = std::move(x.m_topic);
    m_timestamp = std::move(x.m_timestamp);
}

InternalMsgDescriptor_TypeIntrospectionExample& InternalMsgDescriptor_TypeIntrospectionExample::operator =(
        const InternalMsgDescriptor_TypeIntrospectionExample& x)
{

    m_id = x.m_id;
    m_topic = x.m_topic;
    m_timestamp = x.m_timestamp;

    return *this;
}

InternalMsgDescriptor_TypeIntrospectionExample& InternalMsgDescriptor_TypeIntrospectionExample::operator =(
        InternalMsgDescriptor_TypeIntrospectionExample&& x) noexcept
{

    m_id = x.m_id;
    m_topic = std::move(x.m_topic);
    m_timestamp = std::move(x.m_timestamp);

    return *this;
}

bool InternalMsgDescriptor_TypeIntrospectionExample::operator ==(
        const InternalMsgDescriptor_TypeIntrospectionExample& x) const
{

    return (m_id == x.m_id && m_topic == x.m_topic && m_timestamp == x.m_timestamp);
}

bool InternalMsgDescriptor_TypeIntrospectionExample::operator !=(
        const InternalMsgDescriptor_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalMsgDescriptor_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += InternalTimestamp_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t InternalMsgDescriptor_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalMsgDescriptor_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.topic().size() + 1;

    current_alignment += InternalTimestamp_TypeIntrospectionExample::getCdrSerializedSize(data.timestamp(), current_alignment);

    return current_alignment - initial_alignment;
}

void InternalMsgDescriptor_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_id;
    scdr << m_topic.c_str();
    scdr << m_timestamp;

}

void InternalMsgDescriptor_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_id;
    dcdr >> m_topic;
    dcdr >> m_timestamp;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void InternalMsgDescriptor_TypeIntrospectionExample::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t InternalMsgDescriptor_TypeIntrospectionExample::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& InternalMsgDescriptor_TypeIntrospectionExample::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member topic
 * @param _topic New value to be copied in member topic
 */
void InternalMsgDescriptor_TypeIntrospectionExample::topic(
        const std::string& _topic)
{
    m_topic = _topic;
}

/*!
 * @brief This function moves the value in member topic
 * @param _topic New value to be moved in member topic
 */
void InternalMsgDescriptor_TypeIntrospectionExample::topic(
        std::string&& _topic)
{
    m_topic = std::move(_topic);
}

/*!
 * @brief This function returns a constant reference to member topic
 * @return Constant reference to member topic
 */
const std::string& InternalMsgDescriptor_TypeIntrospectionExample::topic() const
{
    return m_topic;
}

/*!
 * @brief This function returns a reference to member topic
 * @return Reference to member topic
 */
std::string& InternalMsgDescriptor_TypeIntrospectionExample::topic()
{
    return m_topic;
}
/*!
 * @brief This function copies the value in member timestamp
 * @param _timestamp New value to be copied in member timestamp
 */
void InternalMsgDescriptor_TypeIntrospectionExample::timestamp(
        const InternalTimestamp_TypeIntrospectionExample& _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function moves the value in member timestamp
 * @param _timestamp New value to be moved in member timestamp
 */
void InternalMsgDescriptor_TypeIntrospectionExample::timestamp(
        InternalTimestamp_TypeIntrospectionExample&& _timestamp)
{
    m_timestamp = std::move(_timestamp);
}

/*!
 * @brief This function returns a constant reference to member timestamp
 * @return Constant reference to member timestamp
 */
const InternalTimestamp_TypeIntrospectionExample& InternalMsgDescriptor_TypeIntrospectionExample::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
InternalTimestamp_TypeIntrospectionExample& InternalMsgDescriptor_TypeIntrospectionExample::timestamp()
{
    return m_timestamp;
}

size_t InternalMsgDescriptor_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool InternalMsgDescriptor_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalMsgDescriptor_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

InternalMessage_TypeIntrospectionExample::InternalMessage_TypeIntrospectionExample()
{
    // m_descriptor com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@6b0c2d26

    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@3d3fcdb0
    m_message ="";
    // m_timestamps com.eprosima.idl.parser.typecode.ArrayTypeCode@641147d0


    // Just to register all known types
    registerSuperComplexTypes();
}

InternalMessage_TypeIntrospectionExample::~InternalMessage_TypeIntrospectionExample()
{



}

InternalMessage_TypeIntrospectionExample::InternalMessage_TypeIntrospectionExample(
        const InternalMessage_TypeIntrospectionExample& x)
{
    m_descriptor = x.m_descriptor;
    m_message = x.m_message;
    m_timestamps = x.m_timestamps;
}

InternalMessage_TypeIntrospectionExample::InternalMessage_TypeIntrospectionExample(
        InternalMessage_TypeIntrospectionExample&& x) noexcept 
{
    m_descriptor = std::move(x.m_descriptor);
    m_message = std::move(x.m_message);
    m_timestamps = std::move(x.m_timestamps);
}

InternalMessage_TypeIntrospectionExample& InternalMessage_TypeIntrospectionExample::operator =(
        const InternalMessage_TypeIntrospectionExample& x)
{

    m_descriptor = x.m_descriptor;
    m_message = x.m_message;
    m_timestamps = x.m_timestamps;

    return *this;
}

InternalMessage_TypeIntrospectionExample& InternalMessage_TypeIntrospectionExample::operator =(
        InternalMessage_TypeIntrospectionExample&& x) noexcept
{

    m_descriptor = std::move(x.m_descriptor);
    m_message = std::move(x.m_message);
    m_timestamps = std::move(x.m_timestamps);

    return *this;
}

bool InternalMessage_TypeIntrospectionExample::operator ==(
        const InternalMessage_TypeIntrospectionExample& x) const
{

    return (m_descriptor == x.m_descriptor && m_message == x.m_message && m_timestamps == x.m_timestamps);
}

bool InternalMessage_TypeIntrospectionExample::operator !=(
        const InternalMessage_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t InternalMessage_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += InternalMsgDescriptor_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    for(size_t a = 0; a < (2); ++a)
    {
        current_alignment += InternalTimestamp_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t InternalMessage_TypeIntrospectionExample::getCdrSerializedSize(
        const InternalMessage_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += InternalMsgDescriptor_TypeIntrospectionExample::getCdrSerializedSize(data.descriptor(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    for(size_t a = 0; a < data.timestamps().size(); ++a)
    {
            current_alignment += InternalTimestamp_TypeIntrospectionExample::getCdrSerializedSize(data.timestamps().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void InternalMessage_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_descriptor;
    scdr << m_message.c_str();
    scdr << m_timestamps;


}

void InternalMessage_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_descriptor;
    dcdr >> m_message;
    dcdr >> m_timestamps;

}

/*!
 * @brief This function copies the value in member descriptor
 * @param _descriptor New value to be copied in member descriptor
 */
void InternalMessage_TypeIntrospectionExample::descriptor(
        const InternalMsgDescriptor_TypeIntrospectionExample& _descriptor)
{
    m_descriptor = _descriptor;
}

/*!
 * @brief This function moves the value in member descriptor
 * @param _descriptor New value to be moved in member descriptor
 */
void InternalMessage_TypeIntrospectionExample::descriptor(
        InternalMsgDescriptor_TypeIntrospectionExample&& _descriptor)
{
    m_descriptor = std::move(_descriptor);
}

/*!
 * @brief This function returns a constant reference to member descriptor
 * @return Constant reference to member descriptor
 */
const InternalMsgDescriptor_TypeIntrospectionExample& InternalMessage_TypeIntrospectionExample::descriptor() const
{
    return m_descriptor;
}

/*!
 * @brief This function returns a reference to member descriptor
 * @return Reference to member descriptor
 */
InternalMsgDescriptor_TypeIntrospectionExample& InternalMessage_TypeIntrospectionExample::descriptor()
{
    return m_descriptor;
}
/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void InternalMessage_TypeIntrospectionExample::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void InternalMessage_TypeIntrospectionExample::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& InternalMessage_TypeIntrospectionExample::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& InternalMessage_TypeIntrospectionExample::message()
{
    return m_message;
}
/*!
 * @brief This function copies the value in member timestamps
 * @param _timestamps New value to be copied in member timestamps
 */
void InternalMessage_TypeIntrospectionExample::timestamps(
        const std::array<InternalTimestamp_TypeIntrospectionExample, 2>& _timestamps)
{
    m_timestamps = _timestamps;
}

/*!
 * @brief This function moves the value in member timestamps
 * @param _timestamps New value to be moved in member timestamps
 */
void InternalMessage_TypeIntrospectionExample::timestamps(
        std::array<InternalTimestamp_TypeIntrospectionExample, 2>&& _timestamps)
{
    m_timestamps = std::move(_timestamps);
}

/*!
 * @brief This function returns a constant reference to member timestamps
 * @return Constant reference to member timestamps
 */
const std::array<InternalTimestamp_TypeIntrospectionExample, 2>& InternalMessage_TypeIntrospectionExample::timestamps() const
{
    return m_timestamps;
}

/*!
 * @brief This function returns a reference to member timestamps
 * @return Reference to member timestamps
 */
std::array<InternalTimestamp_TypeIntrospectionExample, 2>& InternalMessage_TypeIntrospectionExample::timestamps()
{
    return m_timestamps;
}

size_t InternalMessage_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool InternalMessage_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void InternalMessage_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

SuperComplex_TypeIntrospectionExample::SuperComplex_TypeIntrospectionExample()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@62e136d3
    m_index = 0;
    // m_main_point com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@4206a205

    // m_internal_data com.eprosima.idl.parser.typecode.SequenceTypeCode@29ba4338

    // m_internal_data_bounded com.eprosima.idl.parser.typecode.SequenceTypeCode@57175e74

    // m_messages com.eprosima.idl.parser.typecode.ArrayTypeCode@7bb58ca3


    // Just to register all known types
    registerSuperComplexTypes();
}

SuperComplex_TypeIntrospectionExample::~SuperComplex_TypeIntrospectionExample()
{





}

SuperComplex_TypeIntrospectionExample::SuperComplex_TypeIntrospectionExample(
        const SuperComplex_TypeIntrospectionExample& x)
{
    m_index = x.m_index;
    m_main_point = x.m_main_point;
    m_internal_data = x.m_internal_data;
    m_internal_data_bounded = x.m_internal_data_bounded;
    m_messages = x.m_messages;
}

SuperComplex_TypeIntrospectionExample::SuperComplex_TypeIntrospectionExample(
        SuperComplex_TypeIntrospectionExample&& x) noexcept 
{
    m_index = x.m_index;
    m_main_point = std::move(x.m_main_point);
    m_internal_data = std::move(x.m_internal_data);
    m_internal_data_bounded = std::move(x.m_internal_data_bounded);
    m_messages = std::move(x.m_messages);
}

SuperComplex_TypeIntrospectionExample& SuperComplex_TypeIntrospectionExample::operator =(
        const SuperComplex_TypeIntrospectionExample& x)
{

    m_index = x.m_index;
    m_main_point = x.m_main_point;
    m_internal_data = x.m_internal_data;
    m_internal_data_bounded = x.m_internal_data_bounded;
    m_messages = x.m_messages;

    return *this;
}

SuperComplex_TypeIntrospectionExample& SuperComplex_TypeIntrospectionExample::operator =(
        SuperComplex_TypeIntrospectionExample&& x) noexcept
{

    m_index = x.m_index;
    m_main_point = std::move(x.m_main_point);
    m_internal_data = std::move(x.m_internal_data);
    m_internal_data_bounded = std::move(x.m_internal_data_bounded);
    m_messages = std::move(x.m_messages);

    return *this;
}

bool SuperComplex_TypeIntrospectionExample::operator ==(
        const SuperComplex_TypeIntrospectionExample& x) const
{

    return (m_index == x.m_index && m_main_point == x.m_main_point && m_internal_data == x.m_internal_data && m_internal_data_bounded == x.m_internal_data_bounded && m_messages == x.m_messages);
}

bool SuperComplex_TypeIntrospectionExample::operator !=(
        const SuperComplex_TypeIntrospectionExample& x) const
{
    return !(*this == x);
}

size_t SuperComplex_TypeIntrospectionExample::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += InternalPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += InternalPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 3; ++a)
    {
        current_alignment += InternalPoints_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);}


    for(size_t a = 0; a < (2); ++a)
    {
        current_alignment += InternalMessage_TypeIntrospectionExample::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t SuperComplex_TypeIntrospectionExample::getCdrSerializedSize(
        const SuperComplex_TypeIntrospectionExample& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += InternalPoints_TypeIntrospectionExample::getCdrSerializedSize(data.main_point(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.internal_data().size(); ++a)
    {
        current_alignment += InternalPoints_TypeIntrospectionExample::getCdrSerializedSize(data.internal_data().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.internal_data_bounded().size(); ++a)
    {
        current_alignment += InternalPoints_TypeIntrospectionExample::getCdrSerializedSize(data.internal_data_bounded().at(a), current_alignment);}


    for(size_t a = 0; a < data.messages().size(); ++a)
    {
            current_alignment += InternalMessage_TypeIntrospectionExample::getCdrSerializedSize(data.messages().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void SuperComplex_TypeIntrospectionExample::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_main_point;
    scdr << m_internal_data;
    scdr << m_internal_data_bounded;
    scdr << m_messages;


}

void SuperComplex_TypeIntrospectionExample::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_main_point;
    dcdr >> m_internal_data;
    dcdr >> m_internal_data_bounded;
    dcdr >> m_messages;

}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void SuperComplex_TypeIntrospectionExample::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t SuperComplex_TypeIntrospectionExample::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& SuperComplex_TypeIntrospectionExample::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member main_point
 * @param _main_point New value to be copied in member main_point
 */
void SuperComplex_TypeIntrospectionExample::main_point(
        const InternalPoints_TypeIntrospectionExample& _main_point)
{
    m_main_point = _main_point;
}

/*!
 * @brief This function moves the value in member main_point
 * @param _main_point New value to be moved in member main_point
 */
void SuperComplex_TypeIntrospectionExample::main_point(
        InternalPoints_TypeIntrospectionExample&& _main_point)
{
    m_main_point = std::move(_main_point);
}

/*!
 * @brief This function returns a constant reference to member main_point
 * @return Constant reference to member main_point
 */
const InternalPoints_TypeIntrospectionExample& SuperComplex_TypeIntrospectionExample::main_point() const
{
    return m_main_point;
}

/*!
 * @brief This function returns a reference to member main_point
 * @return Reference to member main_point
 */
InternalPoints_TypeIntrospectionExample& SuperComplex_TypeIntrospectionExample::main_point()
{
    return m_main_point;
}
/*!
 * @brief This function copies the value in member internal_data
 * @param _internal_data New value to be copied in member internal_data
 */
void SuperComplex_TypeIntrospectionExample::internal_data(
        const std::vector<InternalPoints_TypeIntrospectionExample>& _internal_data)
{
    m_internal_data = _internal_data;
}

/*!
 * @brief This function moves the value in member internal_data
 * @param _internal_data New value to be moved in member internal_data
 */
void SuperComplex_TypeIntrospectionExample::internal_data(
        std::vector<InternalPoints_TypeIntrospectionExample>&& _internal_data)
{
    m_internal_data = std::move(_internal_data);
}

/*!
 * @brief This function returns a constant reference to member internal_data
 * @return Constant reference to member internal_data
 */
const std::vector<InternalPoints_TypeIntrospectionExample>& SuperComplex_TypeIntrospectionExample::internal_data() const
{
    return m_internal_data;
}

/*!
 * @brief This function returns a reference to member internal_data
 * @return Reference to member internal_data
 */
std::vector<InternalPoints_TypeIntrospectionExample>& SuperComplex_TypeIntrospectionExample::internal_data()
{
    return m_internal_data;
}
/*!
 * @brief This function copies the value in member internal_data_bounded
 * @param _internal_data_bounded New value to be copied in member internal_data_bounded
 */
void SuperComplex_TypeIntrospectionExample::internal_data_bounded(
        const std::vector<InternalPoints_TypeIntrospectionExample>& _internal_data_bounded)
{
    m_internal_data_bounded = _internal_data_bounded;
}

/*!
 * @brief This function moves the value in member internal_data_bounded
 * @param _internal_data_bounded New value to be moved in member internal_data_bounded
 */
void SuperComplex_TypeIntrospectionExample::internal_data_bounded(
        std::vector<InternalPoints_TypeIntrospectionExample>&& _internal_data_bounded)
{
    m_internal_data_bounded = std::move(_internal_data_bounded);
}

/*!
 * @brief This function returns a constant reference to member internal_data_bounded
 * @return Constant reference to member internal_data_bounded
 */
const std::vector<InternalPoints_TypeIntrospectionExample>& SuperComplex_TypeIntrospectionExample::internal_data_bounded() const
{
    return m_internal_data_bounded;
}

/*!
 * @brief This function returns a reference to member internal_data_bounded
 * @return Reference to member internal_data_bounded
 */
std::vector<InternalPoints_TypeIntrospectionExample>& SuperComplex_TypeIntrospectionExample::internal_data_bounded()
{
    return m_internal_data_bounded;
}
/*!
 * @brief This function copies the value in member messages
 * @param _messages New value to be copied in member messages
 */
void SuperComplex_TypeIntrospectionExample::messages(
        const std::array<InternalMessage_TypeIntrospectionExample, 2>& _messages)
{
    m_messages = _messages;
}

/*!
 * @brief This function moves the value in member messages
 * @param _messages New value to be moved in member messages
 */
void SuperComplex_TypeIntrospectionExample::messages(
        std::array<InternalMessage_TypeIntrospectionExample, 2>&& _messages)
{
    m_messages = std::move(_messages);
}

/*!
 * @brief This function returns a constant reference to member messages
 * @return Constant reference to member messages
 */
const std::array<InternalMessage_TypeIntrospectionExample, 2>& SuperComplex_TypeIntrospectionExample::messages() const
{
    return m_messages;
}

/*!
 * @brief This function returns a reference to member messages
 * @return Reference to member messages
 */
std::array<InternalMessage_TypeIntrospectionExample, 2>& SuperComplex_TypeIntrospectionExample::messages()
{
    return m_messages;
}

size_t SuperComplex_TypeIntrospectionExample::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool SuperComplex_TypeIntrospectionExample::isKeyDefined()
{
    return false;
}

void SuperComplex_TypeIntrospectionExample::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}
